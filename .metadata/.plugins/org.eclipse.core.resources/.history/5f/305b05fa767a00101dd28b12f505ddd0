//
// Generated file, do not edit! Created by nedtool 5.4 from msg/BorderMsg.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __BORDERMSG_M_H
#define __BORDERMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "inet/common/INETDefs.h"
#include "inet/common/geometry/common/Coord.h"
// }}

/**
 * Class generated from <tt>msg/BorderMsg.msg:33</tt> by nedtool.
 * <pre>
 * // used as a self packet containing the position, direction and BorderPolicy
 * //
 * // \@author Daniel Willkomm
 * //
 * packet BorderMsg
 * {
 *     int policy;    // border policy to use for the host
 *     inet::Coord startPos; // new start position of the host
 *     inet::Coord direction; // new direction of the host
 * }
 * </pre>
 */
class BorderMsg : public ::omnetpp::cPacket
{
  protected:
    int policy;
    inet::Coord startPos;
    inet::Coord direction;

  private:
    void copy(const BorderMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BorderMsg&);

  public:
    BorderMsg(const char *name=nullptr, short kind=0);
    BorderMsg(const BorderMsg& other);
    virtual ~BorderMsg();
    BorderMsg& operator=(const BorderMsg& other);
    virtual BorderMsg *dup() const override {return new BorderMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPolicy() const;
    virtual void setPolicy(int policy);
    virtual inet::Coord& getStartPos();
    virtual const inet::Coord& getStartPos() const {return const_cast<BorderMsg*>(this)->getStartPos();}
    virtual void setStartPos(const inet::Coord& startPos);
    virtual inet::Coord& getDirection();
    virtual const inet::Coord& getDirection() const {return const_cast<BorderMsg*>(this)->getDirection();}
    virtual void setDirection(const inet::Coord& direction);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BorderMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BorderMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __BORDERMSG_M_H

